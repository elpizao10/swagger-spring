/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.9).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api.flora;

import io.swagger.model.FormFieldValidationRequest;
import io.swagger.model.FormFieldValidationResponse;
import io.swagger.model.FormFieldValuesRequest;
import io.swagger.model.FormFieldValuesResponse;
import io.swagger.model.FormSubmitRequest;
import io.swagger.model.FormSubmitResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.io.IOException;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-10-18T12:39:28.338Z")

@Api(value = "Flora", description = "Flora", tags = { "Flora" })
@SwaggerDefinition(tags = { @Tag(name = "Flora") })
public interface FloraApi {

	@ApiOperation(value = "Receive Form data with all the fields filled out", nickname = "submit", notes = "Fields: search(required), city (required)", response = FormSubmitResponse.class, authorizations = {
			@Authorization(value = "Algho-Token") })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = FormSubmitResponse.class) })
	@RequestMapping(value = "/Flora/submit", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<FormSubmitResponse> submit(
			@RequestParam(value = "Page", required = false, defaultValue = "") String page,
			@ApiParam(value = "Json data", required = true) @Valid @RequestBody FormSubmitRequest data,
			@ApiParam(value = "Algho-Token") @RequestHeader(value = "Algho-Token", required = false) String alghoToken) throws IOException;

	@ApiOperation(value = "Validate Form Field", nickname = "validate", notes = "Verify the inserted data", response = FormFieldValidationResponse.class, authorizations = {
			@Authorization(value = "Algho-Token") })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = FormFieldValidationResponse.class) })
	@RequestMapping(value = "/Flora/validate", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<FormFieldValidationResponse> validate(
			@ApiParam(value = "Json data", required = true) @Valid @RequestBody FormFieldValidationRequest data,
			@ApiParam(value = "Algho-Token") @RequestHeader(value = "Algho-Token", required = false) String alghoToken);

	@ApiOperation(value = "Get Admissible Values", nickname = "values", notes = "Provide a set of admissible values to Algho Form Filed.", response = FormFieldValuesResponse.class, authorizations = {
			@Authorization(value = "Algho-Token") })
	@ApiResponses(value = { @ApiResponse(code = 200, message = "OK", response = FormFieldValuesResponse.class) })
	@RequestMapping(value = "/Flora/values", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	ResponseEntity<FormFieldValuesResponse> values(
			@ApiParam(value = "Json data", required = true) @Valid @RequestBody FormFieldValuesRequest data,
			@ApiParam(value = "JWT Algho-Token") @RequestHeader(value = "Algho-Token", required = false) String alghoToken);

}
